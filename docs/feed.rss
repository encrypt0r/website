<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Muhammad Azeez</title>
		<link>https://mazeez.dev/</link>
		<description>A blog about software engineering and beyond!</description>
		<copyright>2021</copyright>
		<pubDate>Thu, 01 Apr 2021 15:35:58 GMT</pubDate>
		<lastBuildDate>Thu, 01 Apr 2021 15:35:58 GMT</lastBuildDate>
		<item>
			<title>Backing up and restoring databases in Postgres</title>
			<link>https://mazeez.dev/posts/backup-and-restore-in-postgres</link>
			<description>&lt;p&gt;To get a dump of a database you can use &lt;code&gt;pg_dump&lt;/code&gt; or &lt;code&gt;pg_dumpall&lt;/code&gt; for dumping an entire cluster. It &lt;a href="https://www.postgresql.org/docs/9.1/app-pgdump.html"&gt;supports 4 formats&lt;/a&gt;:&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/backup-and-restore-in-postgres</guid>
			<pubDate>Thu, 01 Apr 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;To get a dump of a database you can use &lt;code&gt;pg_dump&lt;/code&gt; or &lt;code&gt;pg_dumpall&lt;/code&gt; for dumping an entire cluster. It &lt;a href="https://www.postgresql.org/docs/9.1/app-pgdump.html"&gt;supports 4 formats&lt;/a&gt;:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Restore via&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;plain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output a plain-text SQL script file (the default).&lt;/td&gt;
&lt;td&gt;&lt;code&gt;psql&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;custom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output a custom-format archive suitable for input into pg_restore. Together with the directory output format, this is the most flexible output format in that it allows manual selection and reordering of archived items during restore. This format is also compressed by default.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pg_restore&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;directory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output a directory-format archive suitable for input into pg_restore. This will create a directory with one file for each table and blob being dumped, plus a so-called Table of Contents file describing the dumped objects in a machine-readable format that pg_restore can read. A directory format archive can be manipulated with standard Unix tools; for example, files in an uncompressed archive can be compressed with the gzip tool. This format is compressed by default.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pg_restore&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output a &lt;code&gt;tar&lt;/code&gt;-format archive suitable for input into pg_restore. The tar format is compatible with the directory format: extracting a tar-format archive produces a valid directory-format archive. However, the tar format does not support compression. Also, when using tar format the relative order of table data items cannot be changed during restore.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pg_restore&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="how-to-backup-a-database"&gt;How to backup a database&lt;/h3&gt;
&lt;p&gt;To create a dump of &lt;code&gt;sample-db&lt;/code&gt; in &lt;code&gt;custom&lt;/code&gt; format and save it to &lt;code&gt;sample-db.dump&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pg_dump -U postgres --encoding utf8 -F c -f sample-db.dump sample-db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a dump of &lt;code&gt;sample-db&lt;/code&gt; in &lt;code&gt;plain&lt;/code&gt; format and save it to &lt;code&gt;sample-db.sql&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pg_dump -U postgres --encoding utf8 -F p -f stoplist.sql stoplist
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="how-to-restore-a-database-dump"&gt;How to restore a database dump&lt;/h3&gt;
&lt;p&gt;First create an empty database to restore the dump to.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# We use template0 because it's is empty and it doesn't conflict with the schemas and tables in the dump.
createdb -U postgres restored-db --template=template0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restore &lt;code&gt;custom&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;, and &lt;code&gt;tar&lt;/code&gt; format dumps using &lt;code&gt;pg_restore&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pg_restore -U postgres -d restored-db &amp;lt; ./sample-db.dump
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restore &lt;code&gt;plain&lt;/code&gt; format dumps using &lt;code&gt;psql&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;psql -U postgres -d restored-db &amp;lt; ./sample-db.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Powershell the &lt;code&gt;&amp;lt;&lt;/code&gt; operator doesn't work. So you'll have to use &lt;code&gt;cmd&lt;/code&gt; on Windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="errors-you-might-come-across"&gt;Errors you might come across:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Corrupted dumps&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;pg_restore: [archiver] found unexpected block id (x) when reading data -- expected y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pg_restore: error unrecognized data block type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might mean the dump is corrupted. One possible reason is the database contained Unicode data and the dump was not encoded in utf8. Use &lt;code&gt;--encoding utf8&lt;/code&gt; when running &lt;code&gt;pg_dump&lt;/code&gt; to fix that.&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Restoring &lt;code&gt;plain&lt;/code&gt; format dumps using &lt;code&gt;pg_restore&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;pg_restore: [archiver] did not find magic string in file header
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pg_restore: [archiver] input file does not appear to be a valid archive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This happens if you run &lt;code&gt;pg_restore&lt;/code&gt; on a &lt;code&gt;plain&lt;/code&gt; format dump. Use &lt;code&gt;psql&lt;/code&gt; to restore it instead.&lt;/p&gt;
&lt;p&gt;If you have any other tips/tricks, please write the down in the comments!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Why I love Powershell as a scripting language</title>
			<link>https://mazeez.dev/posts/why-i-love-powershell</link>
			<description>&lt;p&gt;Every once in a while, I have to write a script to automate a task. Maybe it's part of a CI/CD pipeline, or it's part of my dev workflow. My favorite language for writing scripts is PowerShell. Here is why:&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/why-i-love-powershell</guid>
			<pubDate>Sun, 14 Mar 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Every once in a while, I have to write a script to automate a task. Maybe it's part of a CI/CD pipeline, or it's part of my dev workflow. My favorite language for writing scripts is PowerShell. Here is why:&lt;/p&gt;
&lt;h1 id="powershell-has-an-object-pipeline"&gt;1. Powershell has an object pipeline&lt;/h1&gt;
&lt;p&gt;When you pass data (or pipe them) from one command to the next, the data is treated as an object, not as a string. Which means the data can have different properties and it retains these properties.&lt;/p&gt;
&lt;p&gt;This is very powerful and unlocks all kinds of composability scenarios. Commands don't have to be single purpose, they don't have to provide different switches to get different outputs. They give you everything and you can use only the properties you need.&lt;/p&gt;
&lt;h1 id="you-have-the-full-power-of.net"&gt;2. You have the full power of .NET&lt;/h1&gt;
&lt;p&gt;Powershell is a first class programming language on .NET. You can do almost everything with Powershell. that you can do with C# or F#.  &lt;a href="https://devblogs.microsoft.com/scripting/create-a-simple-graphical-interface-for-a-powershell-script/"&gt;You can even create GUIs if you want to&lt;/a&gt;. This means that you have access to the coherent and well designed Base Class Library of .NET as well as the entire gallery of &lt;a href="https://www.nuget.org/"&gt;nuget&lt;/a&gt; packages. It also has &lt;a href="https://www.powershellgallery.com/packages"&gt;a lot of modules of it's own&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="you-can-use-selectwheregroupby"&gt;3. You can use Select/Where/GroupBy&lt;/h1&gt;
&lt;p&gt;Because Powershell is built on top of .NET, it has access to .NET's version of map/filter/reduce. They make scripts much more pleasant to write and read. However the names are a bit different from Javascript or other languages:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JS Name&lt;/th&gt;
&lt;th&gt;Powershell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Filter&lt;/td&gt;
&lt;td&gt;Where&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Map&lt;/td&gt;
&lt;td&gt;Select&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reduce&lt;/td&gt;
&lt;td&gt;Measure / ForEach&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reduce&lt;/td&gt;
&lt;td&gt;GroupBy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="its-now-cross-platform-and-open-source"&gt;4. It's now cross-platform and open-source&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/PowerShell/PowerShell"&gt;Powershell Core&lt;/a&gt; is a cross-platform and open-source version of Powershell built on top of .NET Core maintained by Microsoft.&lt;/p&gt;
&lt;h1 id="working-with-data-is-easy"&gt;5. Working with Data is easy&lt;/h1&gt;
&lt;p&gt;You can easily work with &lt;a href="https://adamtheautomator.com/powershell-excel/"&gt;Excel&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/select-xml"&gt;XML&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-json"&gt;JSON&lt;/a&gt; data which makes working with APIs much easier.&lt;/p&gt;
&lt;h1 id="some-cool-examples"&gt;Some cool examples&lt;/h1&gt;
&lt;p&gt;Here are some cool examples that demonstrate the points above:&lt;/p&gt;
&lt;h2 id="get-top-3-largest-files-in-a-folder"&gt;Get top 3 largest files in a folder&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Childitem 'C:\Windows\System32' | 
    Where Length -gt (10MB) | # Only files that are greater than (-gt) 10 MB (MB is a constant in PS!)
    Sort -Descending -Property Length | # Sort files by their length ascending
    Select -First 3 Name, Length # Only select name and length properties (projection)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="output"&gt;Output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Name                    Length
----                    ------
MRT.exe              131005360
nvcompiler.dll        40444864
WindowsCodecsRaw.dll  32612880
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="calling-a-rest-api"&gt;Calling a REST API&lt;/h2&gt;
&lt;p&gt;In this example we call a JSON REST API and print a property&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$uri = 'https://cat-fact.herokuapp.com/facts/random' # random cat fact API
$fact = Invoke-RestMethod -Uri $uri
Write-Host $fact.text
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="output-1"&gt;Output:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Cats make about 100 different sounds. Dogs make only about 10.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="export-all-process-information-as-an-excel-sheet"&gt;Export all process information as an excel sheet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Process | Select-Object Company, Name, Handles | Export-Excel
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="result"&gt;Result:&lt;/h3&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Company&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Handles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft Corporation&lt;/td&gt;
&lt;td&gt;Calculator&lt;/td&gt;
&lt;td&gt;537&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google LLC&lt;/td&gt;
&lt;td&gt;chrome&lt;/td&gt;
&lt;td&gt;449&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: You'll have to install &lt;a href="https://github.com/dfinke/ImportExcel"&gt;ImportExcel&lt;/a&gt; module for this example to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="importing-data-from-excel"&gt;Importing data from excel&lt;/h2&gt;
&lt;p&gt;Consider this excel sheet:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;City&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Population&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Erbil&lt;/td&gt;
&lt;td&gt;1500000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sulaymani&lt;/td&gt;
&lt;td&gt;739182&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Duhok&lt;/td&gt;
&lt;td&gt;1293000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kirkuk&lt;/td&gt;
&lt;td&gt;1598000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Halabja&lt;/td&gt;
&lt;td&gt;245700&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Get the average poluation of cities in Kurdistan:
Import-Excel 'F:\cities.xlsx' | Measure -Average -Property population | Select -Property Average
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: You'll have to install &lt;a href="https://github.com/dfinke/ImportExcel"&gt;ImportExcel&lt;/a&gt; module for this example to work.&lt;/p&gt;
&lt;p&gt;Note 2: Data is from Wikipedia.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="ouput"&gt;Ouput:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1075176.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While my preferred scripting language is Powershell, I strongly believe everyone should use whatever tools/languages they are productive in. There is no best language. Everyone has different preferences and that's okay.&lt;/p&gt;
&lt;p&gt;If you're using Powershell on Windows, I suggest you read &lt;a href="https://www.hanselman.com/blog/taking-your-powershell-prompt-to-the-next-level-with-windows-terminal-and-oh-my-posh-3"&gt;this post&lt;/a&gt; to make your experience even better.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Background Job Scheduling using Hangfire</title>
			<link>https://mazeez.dev/posts/background-job-scheduling-using-hangfire</link>
			<description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post is part of C# &lt;a href="https://www.csadvent.christmas/"&gt;Advent Calendar 2020&lt;/a&gt;.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/background-job-scheduling-using-hangfire</guid>
			<pubDate>Sat, 05 Dec 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post is part of C# &lt;a href="https://www.csadvent.christmas/"&gt;Advent Calendar 2020&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes you've tasks that would take too much time to do in the request-response model. For example sending multiple emails. So you have to send the emails asynchronously (i.e. in the background) and returning a response before the jobs are done. Or maybe you want to do some task periodically. For example generating a resource-intensive report at midnight or sending monthly invoices to customers. In short, you want to be able to schedule jobs and be able to track their progress and see their results.&lt;/p&gt;
&lt;p&gt;You can of course use an in-memory model and use ASP.NET Core's &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services"&gt;IHostedService&lt;/a&gt;. But then if the application restarts all of the scheduled jobs would be gone. So you need to persist the jobs so that they are not lost. And Maybe you want to have multiple workers (consumers) processing the background jobs and the works might be on different machines. And what about retrying jobs when they fail?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.hangfire.io/"&gt;Hangfire&lt;/a&gt;&lt;/strong&gt; is a library that helps you do all of that and more very easily. It's very popular and well tested. It's also customizable and supports different kinds of storage mechanisms. And it supports different styles and techniques of background job processing.&lt;/p&gt;
&lt;img src="../assets/images/posts/background-job-scheduling-using-hangfire/dashboard.jpg" width="800"&gt;
&lt;h2 id="how-to-use-hangfire"&gt;How to use Hangfire&lt;/h2&gt;
&lt;p&gt;We are going to host hangfire in an ASP.NET Core app and use SQLite for storage. You can also use MSSQL, PostgreSQL, MySQL and other database engines and host it in a console app. The &lt;a href="https://docs.hangfire.io/en/latest/getting-started/aspnet-core-applications.html"&gt;official guide&lt;/a&gt; is very good but here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add these Nuget packages*:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PackageReference Include=&amp;quot;Hangfire.Core&amp;quot; Version=&amp;quot;1.7.18&amp;quot; /&amp;gt;
&amp;lt;PackageReference Include=&amp;quot;Hangfire.AspNetCore&amp;quot; Version=&amp;quot;1.7.18&amp;quot; /&amp;gt;
&amp;lt;PackageReference Include=&amp;quot;Hangfire.Storage.SQLite&amp;quot; Version=&amp;quot;0.2.4&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add Hangfire to Dependency Container:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Add Hangfire services.
services.AddHangfire(configuration =&amp;gt; configuration
    .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
    .UseSimpleAssemblyNameTypeSerializer()
    .UseRecommendedSerializerSettings()
    .UseSQLiteStorage());

// Add the processing server as IHostedService
services.AddHangfireServer();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define Hangfire Dashboard route:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;app.UseEndpoints(endpoints =&amp;gt;
{
    endpoints.MapRazorPages();
    endpoints.MapHangfireDashboard();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can run the app and go to &lt;code&gt;/hangfire&lt;/code&gt; and see it. But there are no jobs yet.&lt;/p&gt;
&lt;h2 id="enqueuing-jobs"&gt;Enqueuing Jobs&lt;/h2&gt;
&lt;p&gt;If you want to enqueue a job in a fire-and-forget fashion (i.e. you don't want to wait for the result and you don't care much about when exactly it's going to happen), you do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backgroundJobs.Enqueue(() =&amp;gt; Console.WriteLine(&amp;quot;Hello world from Hangfire!&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you wanted to something that might require some dependencies. For example you need a connection to the database or access to configurations? Well, then you can create a class for the job and get your dependencies through Dependency Injection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SendEmailsJob
{
    public SendEmailsJob(IConfiguration configuration)
    {
        // You can ask for configuration or any other
        // dependency the job might need via Dependency Injection
    }

    [JobDisplayName(&amp;quot;Send {0} emails&amp;quot;)]
    [AutomaticRetry(Attempts = 3)]
    public async Task Execute(int count)
    {
        for (int i = 0; i &amp;lt; count; i++)
        {
            await Task.Delay(1000);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see we have defined a method called &lt;code&gt;Execute&lt;/code&gt; which accepts a parameter. We have also decorated it with some attributes to control how it's displayed in the Hangfire dashboard or how many times Hangfire would automatically retry the job if it fails.&lt;/p&gt;
&lt;p&gt;And this is how you'd enqueue the job:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;_backgroundJobClient.Enqueue&amp;lt;SendEmailsJob&amp;gt;(job =&amp;gt; job.Execute(5));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="scheduling-jobs"&gt;Scheduling Jobs&lt;/h2&gt;
&lt;p&gt;If you want a job to be executed periodically on a defined schedule, you can write something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Hangfire.RecurringJob.AddOrUpdate&amp;lt;SendEmailsJob&amp;gt;(job =&amp;gt; job.Execute(10), cronExpression: &amp;quot;*/5 * * * *&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;RecurringJob&lt;/code&gt; is a static class.&lt;/p&gt;
&lt;p&gt;The job can be a simple expression or a class. And you define the schedule using a Cron Expression. You can construct Cron expressions through sites like &lt;a href="https://crontab.cronhub.io/"&gt;this&lt;/a&gt; and &lt;a href="https://crontab.guru/"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;img src="../assets/images/posts/background-job-scheduling-using-hangfire/job.jpg" width="800"&gt;
&lt;h2 id="extensions"&gt;Extensions&lt;/h2&gt;
&lt;p&gt;Hangfire has a lot of extensions, you can check them out &lt;a href="https://www.hangfire.io/extensions.html"&gt;here&lt;/a&gt;. But my favorite extension is this one. Which lets you output real time logs :)&lt;/p&gt;
&lt;img src="https://github.com/pieceofsummer/Hangfire.Console/raw/master/dashboard.png" width="600" /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The console is not real-time if you use SQLite as the storage engine.&lt;/p&gt;
&lt;h2 id="source-code"&gt;Source code&lt;/h2&gt;
&lt;p&gt;I have put a sample application &lt;a href="https://github.com/mhmd-azeez/HangfireDemo"&gt;here &lt;/a&gt; which contains the codes in this article and the rest of the ASP.NET Core app.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to include folders as link recursively in csproj files</title>
			<link>https://mazeez.dev/posts/csproj-include-folders-recursively</link>
			<description>&lt;p&gt;Suppose we have a folder called &lt;code&gt;dependencies&lt;/code&gt; with this structure:&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/csproj-include-folders-recursively</guid>
			<pubDate>Tue, 13 Oct 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Suppose we have a folder called &lt;code&gt;dependencies&lt;/code&gt; with this structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - dependencies
   - child-folder
     - file.txt
     - file2.txt
   - file3.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to add the entire folder as link and preserve the directory structure, you can use this inside your &lt;code&gt;.csproj&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Include=&amp;quot;..\dependencies\**\*&amp;quot;&amp;gt;
      &amp;lt;Link&amp;gt;dependencies\%(RecursiveDir)/%(FileName)%(Extension)&amp;lt;/Link&amp;gt;
      &amp;lt;CopyToOutputDirectory&amp;gt;PreserveNewest&amp;lt;/CopyToOutputDirectory&amp;gt;
    &amp;lt;/None&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will include &lt;code&gt;dependencies&lt;/code&gt; folder inside your project along with all of its child folder and files.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>GitHub Party Trick</title>
			<link>https://mazeez.dev/posts/github-party-trick</link>
			<description>&lt;p&gt;GitHub associates commits with people via email addresses. Each commit is signed with a commit and a name. So when you push a repo to GitHub, it looks for a user with that email address and associates the commit with that user. This allows some cool tricks!&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/github-party-trick</guid>
			<pubDate>Tue, 25 Aug 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;GitHub associates commits with people via email addresses. Each commit is signed with a commit and a name. So when you push a repo to GitHub, it looks for a user with that email address and associates the commit with that user. This allows some cool tricks!&lt;/p&gt;
&lt;p&gt;You can commit as your favorite programmer in your repositories! &lt;a href="https://github.com/encrypt0r/trick/graphs/contributors"&gt;Example&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/images/posts/github-party-trick/contributors.png" class="img-fluid" alt="List of contributors contains Rhyan Dhall, Rich Harris, and Linus Torvalds" /&gt;&lt;/p&gt;
&lt;p&gt;In a repository, change your email address to their email address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config user.email &amp;quot;email&amp;#64;example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optional: Change your name to their name too!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config user.name &amp;quot;Famous Person&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now you can commit and push to GitHub. Now GitHub associates the commits with their account!&lt;/p&gt;
&lt;p&gt;Note: The commits don't show up on their profile page. GitHub &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/why-are-my-contributions-not-showing-up-on-my-profile#commits"&gt;has this to say&lt;/a&gt; about showing commits on a user's profile:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Commits will appear on your contributions graph if they meet &lt;strong&gt;all&lt;/strong&gt; of the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The email address used for the commits is associated with your GitHub account.&lt;/li&gt;
&lt;li&gt;The commits were made in a standalone repository, not a fork.&lt;/li&gt;
&lt;li&gt;The commits were made:
&lt;ul&gt;
&lt;li&gt;In the repository's default branch (usually &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;gh-pages&lt;/code&gt; branch (for repositories with project sites)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on project sites, see &amp;quot;&lt;a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites"&gt;About GitHub Pages&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;In addition, &lt;strong&gt;at least one&lt;/strong&gt; of the following must be true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are a collaborator on the repository or are a member of the organization that owns the repository.&lt;/li&gt;
&lt;li&gt;You have forked the repository.&lt;/li&gt;
&lt;li&gt;You have opened a pull request or issue in the repository.&lt;/li&gt;
&lt;li&gt;You have starred the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s.yimg.com/ny/api/res/1.2/27_UvTRiSb4a5C42zgkIeQ--%7EA/YXBwaWQ9aGlnaGxhbmRlcjtzbT0xO3c9NTAwO2g9MjAw/http://media.zenfs.com/en/homerun/feed_manager_auto_publish_494/3da2941d2b6e5249f73bed9bd44fdbf3" class="img-fluid" alt="Identity theft is not a joke~" /&gt;&lt;/p&gt;
&lt;p&gt;While we used this as a fun trick, it can be used for nefarious reasons. One way to workaround this issue is to &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work"&gt;cryptographically sign your commits&lt;/a&gt;. So that people can be sure that you have made the commits.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Use C# Source Generators to make all of your methods async!</title>
			<link>https://mazeez.dev/posts/csharp-source-generators</link>
			<description>&lt;p&gt;C# Source Generators is a C# 9 feature that lets your generate source code during build. For more information read the &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;announcement blog post&lt;/a&gt; on .NET blog.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/csharp-source-generators</guid>
			<pubDate>Tue, 05 May 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;C# Source Generators is a C# 9 feature that lets your generate source code during build. For more information read the &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;announcement blog post&lt;/a&gt; on .NET blog.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;NOTE: If it's not clear, this post is satire. Don't use any of the code or suggestions in production.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have you ever had problems with app speed? Well, the easiest way to speed up your app is to make your methods async. And the easiest way of making your methods async is by using &lt;code&gt;Task.Run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we had a method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static void PrintNumber(int number)
{
    Console.WriteLine(number);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's assume that &lt;code&gt;PrintNumber&lt;/code&gt; is slow and we want to speed it up, what do we do? We stick it in Task.Run and voila! all of our problems are solved!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static Task PrintNumberAsync(int number)
{
    return Task.Run(() =&amp;gt; PrintNumber(number));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, how are c# source generators useful here? Well, we can write a source generator that turns all of your methods async just by applying a simple attribute!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;partial class Program
{
    static async Task Main(string[] args)
    {
       await PrintNumberAsync(42);
    }

    [Asyncify]
    static void PrintNumber(int number)
    {
        Console.WriteLine(number);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how &lt;code&gt;Main&lt;/code&gt; calls &lt;code&gt;PrintNumberAsync&lt;/code&gt; without us needing to define it? That's because there is a source generator that generates the async version of any method that's decorated with the &lt;code&gt;Asyncify&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;The source generator is very simple but a little verbose, so I don't include the source code here. But it's available on &lt;a href="https://github.com/encrypt0r/FunWithSourceGenerators"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is that our source generator asks for any method that has our specific attribute (&lt;code&gt;Asyncify&lt;/code&gt;) applied to it.&lt;/p&gt;
&lt;p&gt;It then groups the methods by their class, for each class it creates another partial class that contains the async versions for the specified methods.&lt;/p&gt;
&lt;p&gt;Here is how we generate each method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;private void ProcessMethod(StringBuilder source, IMethodSymbol methodSymbol)
{
    // SayHello =&amp;gt; SayHelloAsync
    string asyncMethodName = $&amp;quot;{methodSymbol.Name}Async&amp;quot;;

    var staticModifier = methodSymbol.IsStatic ? &amp;quot;static&amp;quot; : string.Empty;

    // void =&amp;gt; Task, bool =&amp;gt; Task&amp;lt;bool&amp;gt;
    var asyncReturnType = methodSymbol.ReturnType.Name == &amp;quot;Void&amp;quot; ? 
                          &amp;quot;Task&amp;quot; :
                          $&amp;quot;Task&amp;lt;{methodSymbol.ReturnType.Name}&amp;gt;&amp;quot;;

    // int number, string name
    var parameters = string.Join(&amp;quot;,&amp;quot;, methodSymbol.Parameters.Select(p =&amp;gt; $&amp;quot;{p.Type} {p.Name}&amp;quot;));
    // number, name
    var arguments = string.Join(&amp;quot;,&amp;quot;, methodSymbol.Parameters.Select(p =&amp;gt; p.Name));

    source.Append($&amp;#64;&amp;quot;
public {staticModifier} {asyncReturnType} {asyncMethodName}({parameters})
{{
    return Task.Run(() =&amp;gt; {methodSymbol.Name}({arguments}));
}}
&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because C# Source Generators are part of build, we get a lot metadata (like &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.imethodsymbol?view=roslyn-dotnet"&gt;IMethodSymbol&lt;/a&gt;) about all of the classes, methods, fields, etc. It's like reflection, but in compile time. If you have experience with Analyzers it's very similar because they are both based on Roslyn. But unlike Analyzers, C# Source Generators emit code using strings, not syntax tree deltas. To be honest, I like the string approach. It's a lot more friendly. However, it can get hard to maintain for complicated scenarios.&lt;/p&gt;
&lt;p&gt;To make our source generator even more useful, we can modify it so that we can apply the &lt;code&gt;Asyncify&lt;/code&gt; attribute on a class and all of the methods of the class get asyncified! I'll leave that as an exercise.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Enabling automatic updates for sideloaded UWP apps: Multiple update channels</title>
			<link>https://mazeez.dev/posts/update-sideloaded-uwp-2</link>
			<description>&lt;p&gt;In a &lt;a href="https://mazeez.dev/posts/update-sideloaded-uwp"&gt;previous&lt;/a&gt; post we talked about getting more control over the update process in sideloaded UWP apps. And in &lt;a href="https://mazeez.dev/posts/uwp-devops"&gt;another post&lt;/a&gt; we talked about setting up CI/CD pipelines for UWP apps. This time we will talk about how to create multiple update channels, i.e. alpha, beta, stable, for our UWP app.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/update-sideloaded-uwp-2</guid>
			<pubDate>Sat, 25 Apr 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In a &lt;a href="https://mazeez.dev/posts/update-sideloaded-uwp"&gt;previous&lt;/a&gt; post we talked about getting more control over the update process in sideloaded UWP apps. And in &lt;a href="https://mazeez.dev/posts/uwp-devops"&gt;another post&lt;/a&gt; we talked about setting up CI/CD pipelines for UWP apps. This time we will talk about how to create multiple update channels, i.e. alpha, beta, stable, for our UWP app.&lt;/p&gt;
&lt;p&gt;The idea is very simple, and although I am going to use Azure Blob Storage, nothing stops you from using a normal web host.&lt;/p&gt;
&lt;h2 id="build-pipeline"&gt;Build Pipeline&lt;/h2&gt;
&lt;p&gt;All of the channels should use the same build pipeline. The pipeline builds and signs the UWP. I have talked about setting up a build pipeline for UWP apps &lt;a href="https://mazeez.dev/posts/uwp-devops"&gt;here&lt;/a&gt;. You don't need to change much.&lt;/p&gt;
&lt;h2 id="release-pipeline"&gt;Release Pipeline&lt;/h2&gt;
&lt;p&gt;All of the magic happens in the release pipeline. We can have multiple update channels by creating multiple containers in Azure DevOps (or using different prefixes, whichever you like more) for each channel.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/images/posts/update-sideloaded-uwp-2/channels.png" class="img-fluid" alt="channels" /&gt;&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: When creating the storage account, set the the performance tier to &lt;code&gt;Standard&lt;/code&gt; (&lt;code&gt;Premium&lt;/code&gt; only supports &lt;code&gt;Page Blob&lt;/code&gt;s) and when creating the containers set the container access level to &lt;code&gt;Blob&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now for each channel, we create a stage in the release pipeline&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/images/posts/update-sideloaded-uwp-2/release-stages.png" class="img-fluid" alt="release-stages" /&gt;&lt;/p&gt;
&lt;p&gt;Between each step we can have various approval processes or gates, Azure Pipelines makes these kinds of things incredibly easy.&lt;/p&gt;
&lt;p&gt;The stages are very similar, here is what each stage has to do:&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/images/posts/update-sideloaded-uwp-2/stage.png" class="img-fluid" alt="stage" /&gt;&lt;/p&gt;
&lt;h3 id="change-index.html-and.installer-urls"&gt;1. Change index.html and .installer urls&lt;/h3&gt;
&lt;p&gt;Because we now have multiple channels, each channel will have its own url. So we have to change &lt;code&gt;index.html&lt;/code&gt; and the &lt;code&gt;.appinstaller&lt;/code&gt; file to reflect the channels' URL. This can be done easily via a simple PowerShell script.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Write-Host &amp;quot;Changing urls for beta channel...&amp;quot;

$oldUrl = &amp;quot;Old URL HERE&amp;quot;
$newUrl = &amp;quot;https://YOUR-STORAGE-ACCOUNT-HERE.blob.core.windows.net/beta&amp;quot;

$folder = &amp;quot;$(System.DefaultWorkingDirectory)/BUILD-ARTIFICAT-NAME/drop/AppxPackages&amp;quot;

$htmlPath = &amp;quot;$folder/index.html&amp;quot;
$installerPath = &amp;quot;$folder/APP-NAME.appinstaller&amp;quot;

((Get-Content -path $htmlPath -Raw) -replace $oldUrl,$newUrl) | Set-Content -Path $htmlPath
((Get-Content -path $installerPath -Raw) -replace $oldUrl,$newUrl) | Set-Content -Path $installerPath
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="delete-old-versions-to-reduce-cost"&gt;2. Delete old versions to reduce cost&lt;/h3&gt;
&lt;p&gt;Although Azure Blob Storage is very cheap, UWP apps can become very large, ours is about 300 MB when compiled in &lt;code&gt;Release&lt;/code&gt; configuration for both &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt; architectures. So in order to make sure we don't store too much data, we will delete the older versions and only leave the last N versions.&lt;/p&gt;
&lt;p&gt;For this we can use the &lt;a href="https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureCLIV2/Readme.md"&gt;Azure CLI&lt;/a&gt; task. It's similar to a Powershell script, but you're already logged in to your azure subscription. In the script part we can use something like this:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: Azure CLI added support for PowerShell scripts in v2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$container = &amp;quot;beta&amp;quot;
$accountName = &amp;quot;STORAGE-ACCOUNT-NAME&amp;quot;

# Get List of blobs in the container and deserialize the list
$blobs = az storage blob list -c $container --prefix APP-NAME-HERE_ --account-name $accountName | convertFrom-json

# Create a HashTable so that we can store the name of the directory and its creation time
$dict = &amp;#64;{}

Foreach($blob in $blobs)
{
    $versionName = $blob | Select-Object -ExpandProperty name
    $versionName = $versionName.split(&amp;quot;/&amp;quot;)[0]

    $date = $blob | Select-Object -ExpandProperty properties | Select-Object -ExpandProperty creationTime
    $date = [datetime]$date

    $dict[$versionName] = $date
}

# Sort the directories by their creation time and skip the top 2 (we don't want to remove last 2 version)
$ordered = $dict.GetEnumerator() | Sort-Object -Property Value -Descending | Select-Object -Skip 2

Write-Host Deleting obsolete versions...
Foreach($blob in $ordered)
{
    # APP-NAME_1.0.1.0_Test =&amp;gt; APP-NAME_1.0.1.0_Test/*
    $dir = $blob.Key + &amp;quot;/*&amp;quot;
    az storage blob delete-batch -s $container --pattern $dir --account-name $accountName
    Write-Host $blob.Key &amp;quot; - &amp;quot; $blob.Value
}

Write-Host Done
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="copy-the-build-artifact-to-channel-container"&gt;3. Copy the build artifact to channel container&lt;/h3&gt;
&lt;p&gt;We can use the amazingly fast &lt;a href="https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV1/README.md"&gt;AzureBlob File Copy&lt;/a&gt; task to upload the build artifact to azure blob storage. Using it is straightforward, you give it a folder to upload and the name of the container as well as the subscription and it uploads the specified files in no time.&lt;/p&gt;
&lt;h3 id="optional-upload-the-uwp-symbols-to-appcenter"&gt;4. (Optional) Upload the UWP symbols to AppCenter&lt;/h3&gt;
&lt;p&gt;This only needs to be done in the first stage. In order for AppCenter crashes to give you detailed stack traces, it needs the symbols to translate memory addresses to function and class names. You can find more &lt;a href="https://docs.microsoft.com/en-us/appcenter/diagnostics/windows-support#symbolication"&gt;details here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have used the &lt;a href="https://github.com/microsoft/appcenter-cli"&gt;appcenter cli&lt;/a&gt; to upload the symbols.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# AppCenter UWP symbolication
# https://docs.microsoft.com/en-us/appcenter/diagnostics/windows-support#symbolication

# Install appcenter cli
# https://github.com/microsoft/appcenter-cli
npm install -g appcenter-cli

# Login to AppCenter
appcenter login --token $env:AppCenterToken --quiet

# Get the path fo the symbol files (64 bit and 32 bit)
$symbolFiles = Get-ChildItem *.appxsym -Recurse -Force | Select-Object -ExpandProperty FullName

# Upload the symbols
Foreach($symbolFile in $symbolFiles)
{
    Write-Host &amp;quot;Uploading $symbolFile...&amp;quot;
    appcenter crashes upload-symbols --app ORGANIZATION-NAME/APP-NAME --appxsym $symbolFile
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: in the current version, appcenter cli seems to use some deprecated libraries. So I have set &lt;code&gt;Fail on Standard Error&lt;/code&gt; to false on the Powershell task so that the task doesn't fail.&lt;/p&gt;
&lt;p&gt;Note2: I am using Azure Pipelines secrets to pass the AppCenter token to appcenter cli. For that, you have to explicitly map the secret to an environment variable in the &lt;code&gt;Environment Variables&lt;/code&gt; part of the Powershell task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Congratulations! Now you've got yourself a decent multichannel auto-update process. All that remains is to teach the UWP app to look at different &lt;code&gt;.appinstaller&lt;/code&gt; files based on which update channel its listening on.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Getting a code signing certificate for a company in Iraq</title>
			<link>https://mazeez.dev/posts/code-signing-certificate-iraq</link>
			<description>&lt;p&gt;If your company is based in one of the developed countries, chances are you won't have much of a problem. It would take a week at most to get a code signing certificate. However, If your company is based in a country like Iraq, which doesn't have an up-to-date online-accessible list of its companies, then you are going to have a harder time. Fortunately, this guide makes the process much easier and faster. The documents might vary by country, but the certificate authority support team will help you go through the process.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/code-signing-certificate-iraq</guid>
			<pubDate>Thu, 16 Apr 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;If your company is based in one of the developed countries, chances are you won't have much of a problem. It would take a week at most to get a code signing certificate. However, If your company is based in a country like Iraq, which doesn't have an up-to-date online-accessible list of its companies, then you are going to have a harder time. Fortunately, this guide makes the process much easier and faster. The documents might vary by country, but the certificate authority support team will help you go through the process.&lt;/p&gt;
&lt;p&gt;Before we start I want to define some terms, because many people (like myself when I started out) are not familiar with the territory. Nate McMaster explains them very well in his &lt;a href="https://natemcmaster.com/blog/2018/07/02/code-signing/"&gt;blog post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Code_signing"&gt;&lt;em&gt;&lt;strong&gt;Code signing&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; means applying a digital signature to the executable binaries (for example &lt;code&gt;McMaster.Extensions.CommandLineUtils.dll&lt;/code&gt;). This signature confirms the authenticity and integrity of the files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Authenticity&lt;/strong&gt;&lt;/em&gt; proves the files came from me, Nathan McMaster, and not someone pretending to be me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Integrity&lt;/strong&gt;&lt;/em&gt; also proves the files have not been altered by anyone since I made them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Public_key_certificate"&gt;A &lt;em&gt;&lt;strong&gt;certificate&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; contains public information about me and &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;a public key&lt;/a&gt;. Anyone can see my certificate, but only I can produce a signature with it because I keep secret the private key, which matches with the public key in the certificate. Anyone can create a certificate for free on their own, but Windows apps won’t treat this as “trusted” unless you get a certificate from a CA.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Certificate_authority"&gt;A &lt;em&gt;&lt;strong&gt;certificate authority&lt;/strong&gt;&lt;/em&gt; (CA)&lt;/a&gt; is an entity that issues certificates. In my case, I worked with &lt;a href="https://digicert.com/"&gt;DigiCert&lt;/a&gt; to get a certificate. This certificate, unlike a self-created cert, contains additional information which proves DigiCert gave me the certificate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are the benefits of code signing certificates? Well, I had the same question. And I got two good reasons:&lt;/p&gt;
&lt;?# Twitter 1210259160908075008 /?&gt;
&lt;?# Twitter 1210259181854449672 /?&gt;
&lt;p&gt;And code signing certificates come in two flavors: &lt;em&gt;Standard Code Signing Certificate&lt;/em&gt; and &lt;em&gt;Extended Validation (EV) Code Signing Certificates&lt;/em&gt;. &lt;em&gt;EV Code Signing Certificates&lt;/em&gt; are more expensive and harder to get but they provide with instant trust with Microsoft Smart Screen. But they also require either hardware USB tokens or and &lt;a href="https://en.wikipedia.org/wiki/Hardware_security_module"&gt;&lt;em&gt;Hardware Security Module&lt;/em&gt;&lt;/a&gt; to sign software. You can also store them in something like Azure Key Vault. In my limited experience, the standard one is enough and gives you less headache to deal with.&lt;/p&gt;
&lt;p&gt;It took us more than 5 months to get a code signing certificate. Partly because we had no experience with the whole process and partly because our company is based in Iraq. One of our mistakes was that we asked for a EV code signing certificate at first, which made the validation process much harder.&lt;/p&gt;
&lt;h3 id="get-a-db-number"&gt;1. Get a &lt;a href="https://en.wikipedia.org/wiki/Data_Universal_Numbering_System"&gt;D&amp;amp;B&lt;/a&gt; Number&lt;/h3&gt;
&lt;p&gt;The official website of D&amp;amp;B does not open in Iraq and to my knowledge D&amp;amp;B doesn't have a branch in Iraq. Fortunately, you can go to &lt;a href="http://upik.de/en"&gt;http://upik.de/en&lt;/a&gt; and get D&amp;amp;B number. It makes your life much easier as all of the CAs I have talked to consider them a trusted source. They will ask you a few questions and will require documents to prove your company is legitimate. We sent them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Company establishment certificate&lt;/li&gt;
&lt;li&gt;Decision of approval for a company establishment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because these documents were in Kurdish (our company is based in Kurdistan region of Iraq), we translated both documents and send scanned and sent both the translated version and the original version.&lt;/p&gt;
&lt;p&gt;The validation process can take up to 30 days. However, ours took about a week.&lt;/p&gt;
&lt;h3 id="find-a-ca-that-can-work-with-companies-in-iraq"&gt;2. Find a CA that can work with companies in Iraq&lt;/h3&gt;
&lt;p&gt;Not all of the CAs can issue certificates for companies in Iraq. They say it's because sanctions and things like that. But some companies have branches in Middle East and so they will happily issue a certificate for you. Talk with their sales or customer support to confirm that.&lt;/p&gt;
&lt;p&gt;And make sure the CA is partnered to whatever operating system vendor you care about. Here is &lt;a href="https://docs.microsoft.com/en-us/security/trusted-root/participants-list"&gt;the list of CAs partnered with Microsoft&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="go-through-the-validation-process"&gt;3. Go through the validation process&lt;/h3&gt;
&lt;p&gt;In the validation process, they will ask you some questions about your company name, address, and field of work. Make sure to write the full legal name when they ask for company name.&lt;/p&gt;
&lt;p&gt;They will also ask you for documents to prove the answers you've sent them. We sent these documents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decision of approval for a company establishment.&lt;/li&gt;
&lt;li&gt;Our lease contract&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because you already have a D&amp;amp;B number, things should go on smoothly. The CAs are usually helpful and try their best to help you go through the process.&lt;/p&gt;
&lt;h2 id="faq"&gt;FAQ&lt;/h2&gt;
&lt;p&gt;Before starting the process I had these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Should I get the EV or the standard code signing certificate?&lt;/strong&gt;
To be honest the standard code signing certificate seems enough. We signed our app using a standard code signing certificate and Windows didn't complain even on the first download of the app.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can I sign multiple apps with the same certificate?&lt;/strong&gt;
Yes! The certificate is for your company, not a specific app. So you can sign as many apps as you need. Be careful though, if your certificate gets into the hands of malicious people they might sign malware with it and the CA  will be forced to revoke the certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can an individual get a code signing certificate?&lt;/strong&gt;
Yes! Although I am not familiar with the process.&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
		</item>
		<item>
			<title>Running ASP.NET Core on Linux Part 1</title>
			<link>https://mazeez.dev/posts/aspnet-on-linux-1</link>
			<description>&lt;p&gt;In the last couple of weeks, I have been busy setting up a CI/CD pipeline for one of my side projects and getting it to run on Linux. I'll try to write about what I have learned in the process.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/aspnet-on-linux-1</guid>
			<pubDate>Tue, 07 Apr 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In the last couple of weeks, I have been busy setting up a CI/CD pipeline for one of my side projects and getting it to run on Linux. I'll try to write about what I have learned in the process.&lt;/p&gt;
&lt;p&gt;This will be a series of blog posts because I don't want it to become too long. This is the first part. We will create a new ASP.NET Core application and manually run it on Linux and configure Nginx and systemd.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Before anything lets create a new ASP.NET Core Razor Pages web application by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new webapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good, now add it to a git repository and upload it to GitHub, it will be useful for us in the next part of the series.&lt;/p&gt;
&lt;h2 id="setting-up-vscode"&gt;Setting up VSCode&lt;/h2&gt;
&lt;p&gt;VSCode is great for accessing remote Linux servers. It allows you to open multiple terminals and edit files and allows you to download and upload them too. Follow these steps to set it up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh"&gt;Remote - SSH&lt;/a&gt; extension to be able to login into the server and be able to run commands and edit files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;em&gt;Remote Explorer&lt;/em&gt; tab add a new SSH Target for your server and inter username and IP address and follow the instructions. After you added the server to &lt;em&gt;Remote Explorer&lt;/em&gt; connect to it and in &lt;em&gt;Explorer&lt;/em&gt; tab open the &lt;code&gt;/&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download and install the ASP.NET Core runtime on the server. You can find instructions &lt;a href="https://dotnet.microsoft.com/download/dotnet-core"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="publishing-the-website"&gt;Publishing the website&lt;/h2&gt;
&lt;p&gt;Before doing anything we have to publish the website first. We will automate this process later but for now, we will do it manually.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -c Release
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: This will publish the web app in Framework dependent (Meaning that ASP.NET Core runtime has to be installed on the server) and cross-platform (Meaning that it can work on any operating system) mode. You might need to publish it for a specific platform if you're using native libraries or one of your &lt;em&gt;Nuget&lt;/em&gt; packages uses them by using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish"&gt;&lt;code&gt;--runtime&lt;/code&gt; switch&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compress the contents of &lt;code&gt;bin\Release\netcoreapp3.1\publish\&lt;/code&gt;  folder (and rename it to publish.zip) and upload it to &lt;code&gt;/home/www/sample&lt;/code&gt; folder by dragging it into Explorer tab of VSCode.&lt;/p&gt;
&lt;p&gt;Run these commands to unzip and delete the zip file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/www/sample
unzip publish.zip
rm publish.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, now that all of the necessary files are on the server, you can now test if the app actually works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet AspNetOnLinux.dll --urls=http://localhost:9999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything is set up correctly and port &lt;code&gt;9999&lt;/code&gt; is not being used by any other processes, kestrel must be up and running now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there were an exception like &lt;code&gt;System.IO.IOException: Failed to bind to address http://127.0.0.1:9999: address already in use.&lt;/code&gt; Then change the port to something else.&lt;/li&gt;
&lt;li&gt;If There was an error like &lt;code&gt;Command 'dotnet' not found&lt;/code&gt; Then it means that ASP.NET Core runtime has not been installed properly. Install them and try again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we have confirmed that everything works press next we need to configure Nginx as a reverse proxy, i.e. it listens for an external port on an IP address or domain name and re-routes it to kestrel.&lt;/p&gt;
&lt;h2 id="configuring-nginx"&gt;Configuring Nginx&lt;/h2&gt;
&lt;p&gt;Keep kestrel running and open &lt;strong&gt;a new&lt;/strong&gt; terminal in VSCode and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code /etc/nginx/sites-available/default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open Nginx default configurations in VSCode.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen        IP_ADDRESS;
    server_name   HOST_NAME;
    location / {
        proxy_pass         KESTREL_URL;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the above snippet to the configuration file and make these adjustments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instead of &lt;code&gt;IP_ADDRESS&lt;/code&gt; write the external ip address to which you want Nginx to listen. Example: &lt;code&gt;8080&lt;/code&gt;. If &lt;code&gt;HOST_NAME&lt;/code&gt; is a domain name you might want to use port &lt;code&gt;80&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;HOST_NAME&lt;/code&gt; write the domain name or IP address you want Nginx to listen to. If you've rented a VM they usually give you a static public IP that you can use for this. or if you want to use a domain name, you need to configure its DNS settings so that it points to your server's public IP address.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;KESTREL_URL&lt;/code&gt; write the URL you have kestrel listening to. Example: &lt;code&gt;http://localhost:9999&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Save the file and run this command for Nginx to reload the configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Validate configuration file
nginx -t
# Reload configuration file
nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in a browser go to &lt;code&gt;http://HOST_NAME:IP_ADDRESS/&lt;/code&gt; and it should show our web app running 😊&lt;/p&gt;
&lt;p&gt;For more information on configuration Nginx go to &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1"&gt;Microsoft docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-up-systemd"&gt;Setting up systemd&lt;/h2&gt;
&lt;p&gt;Everything seems to be working now. But if you close the ssh session our website will no longer be running and Nginx will return &lt;code&gt;ERROR 502: Bad Gateway&lt;/code&gt; if you visited the website. To make sure the website will always be running and will be restarted if it crashes we can use &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go back to the terminal that's running kestrel and press CTRL+C to stop it. And then run these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code /etc/systemd/system/sample.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open up a blank file in VSCode. Write this configuration in the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Sample ASP.NET Core application

[Service]
WorkingDirectory=/home/www/sample
ExecStart=/usr/bin/dotnet /home/www/sample/sample.dll --urls=http://localhost:9999
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=dotnet-ec
User=root
# You can put your environment variables here:
Environment=ASPNETCORE_ENVIRONMENT=Production

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save it and then run these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Reload systemd configuration
systemctl daemon-reload

systemctl enable sample
systemctl start sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can verify that our application is up and running by running this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should not show any errors if everything has gone according to our plan. Press CTRL+C to stop showing status.&lt;/p&gt;
&lt;p&gt;Now our sample web application will be running reliably and will be restarted if it crashed. You can close VSCode and visit &lt;code&gt;http://HOST_NAME:IP_ADDRESS/&lt;/code&gt; and it should be serving requests.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the next post, we will talk about setting up a CI/CD pipeline using GitHub actions.&lt;/p&gt;
&lt;p&gt;The code is available on  &lt;a href="https://github.com/encrypt0r/AspNetOnLinux"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Debugging native library dependencies on Linux</title>
			<link>https://mazeez.dev/posts/debugging-native-library-dependencies-linux</link>
			<description>&lt;p&gt;.NET Core apps can run on a number of operating systems. When using purely .NET libraries, deployment is a breeze. However, if you're using a library that wraps a native (C/C++) library, then you might have come across this error message when trying to run your app on Linux:&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/debugging-native-library-dependencies-linux</guid>
			<pubDate>Sat, 04 Apr 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;.NET Core apps can run on a number of operating systems. When using purely .NET libraries, deployment is a breeze. However, if you're using a library that wraps a native (C/C++) library, then you might have come across this error message when trying to run your app on Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.TypeInitializationException: The type initializer for 'DlibDotNet.NativeMethods' threw an exception.
 ---&amp;gt; System.DllNotFoundException: Unable to load shared library 'DlibDotNetNativeDnn' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libDlibDotNetNativeDnn: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells us that either &lt;code&gt;libDlibDotNetNativeDnn.so&lt;/code&gt; doesn't exist (which in my case it did), or it has some other native dependencies that are missing.&lt;/p&gt;
&lt;p&gt;To see which dependencies are missing, you use &lt;code&gt;ldd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ldd libDlibDotNetNativeDnn.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it would give you an output like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;linux-vdso.so.1 (0x00007ffdb9fe1000)
libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f06b2254000)
libopenblas.so.0 =&amp;gt; not found
libstdc++.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f06b2072000)
libm.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f06b1f24000)
libgcc_s.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f06b1f0a000)
libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f06b1d1d000)
/lib64/ld-linux-x86-64.so.2 (0x00007f06b490d000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it's clear that &lt;code&gt;libopenblas&lt;/code&gt; is missing from the system. Search for it on google and find the package that contains the library. In &lt;code&gt;libopenblas&lt;/code&gt;'s case, it happens to be in the &lt;code&gt;libopenblas-base&lt;/code&gt; . To install it on ubuntu, you can run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libopenblas-base
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tada 🎉 and now your app (hopefully) works as expected!&lt;/p&gt;
&lt;p&gt;This little error wasted several hours from me. I am grateful to the people who maintain these native library wrappers and hide (most of) the ugliness from us.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How do Object Relational Mappers (like Entity Framework) work?</title>
			<link>https://mazeez.dev/posts/how-orms-work</link>
			<description>&lt;p&gt;When connecting an app or website to a database, most of the time you're querying the database and mapping the result to strongly typed objects. If you've been using an ORM like Enitity Framework or a Micro-ORM like Dapper, they handle the mapping of the objects and translation of the queries between C# and SQL.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/how-orms-work</guid>
			<pubDate>Sat, 21 Dec 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;When connecting an app or website to a database, most of the time you're querying the database and mapping the result to strongly typed objects. If you've been using an ORM like Enitity Framework or a Micro-ORM like Dapper, they handle the mapping of the objects and translation of the queries between C# and SQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This article is a part of the &lt;a href="https://crosscuttingconcerns.com/The-Third-Annual-csharp-Advent"&gt;3rd annual C# advent calendar&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The idea of ORMs is simple, since most of the code mapping code is mechanical and repetitive, it's a very good candidate for automation. Lets assume we have a &lt;code&gt;Person&lt;/code&gt; table with this schema:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;DataType&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Id&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;nvarchar(50)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Height&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Birthdate&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And we have a corresponding &lt;code&gt;Person&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Person
{
   public int Id { get; set; }
   public string Name { get; set; }
   public double Height { get; set; }
   public DateTime Birthdate { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the C# code if we manually retrieve the data and map it to a list of the &lt;code&gt;Person&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task&amp;lt;List&amp;lt;Person&amp;gt;&amp;gt; GetPeople()
{
    var list = new List&amp;lt;Person&amp;gt;();

    var sql = &amp;quot;SELECT Id, Name, Height, Birthdate From Person&amp;quot;;

    using (var connection = new SqlConnection(ConnectionString))
    using (var command = new SqlCommand(sql, connection))
    {
        await connection.OpenAsync();

        using (var reader = await command.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                var person = new Person
                {
                    Id = (int)reader[&amp;quot;Id&amp;quot;],
                    Name = (string)reader[&amp;quot;Name&amp;quot;],
                    Height = (double)reader[&amp;quot;Height&amp;quot;],
                    Birthdate = (DateTime)reader[&amp;quot;Birthdate&amp;quot;],
                };

                list.Add(person);
            }
        }
    }

    return list;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The SQL query and the mapping of columns to properties are the only two things that differ from one table/class to another. If only we can get the list of properties of a class and their types... Well, it turns out that we can!&lt;/p&gt;
&lt;p&gt;System.Reflection.Type represents a .NET type. It has a lot of metadata about the type. We can get the list of the properties of a type by using the &lt;code&gt;GetProperties&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;PropertyInfo[] properties = typeof(Person).GetProperties();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; keyword is used to get the type of a class at compile time. The &lt;code&gt;PropertyInfo&lt;/code&gt; class has many useful properties and methods, but we are only interested in these:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Member&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;Gets the name for a property.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetMethod&lt;/td&gt;
&lt;td&gt;MethodInfo&lt;/td&gt;
&lt;td&gt;Gets the &lt;code&gt;get&lt;/code&gt; method of a property.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SetMethod&lt;/td&gt;
&lt;td&gt;MethodInfo&lt;/td&gt;
&lt;td&gt;Gets the &lt;code&gt;set&lt;/code&gt; method of a property.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, if we have this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var person = new Person
{
    Name = &amp;quot;Ahmed&amp;quot;,
    Height = 180.4,
    Birthdate = new DateTime(1998, 1, 1),
    Id = 24
};

var heightProperty = typeof(Person).GetProperty(nameof(Person.Height));
heightProperty.SetValue(person, 185);

var properies = typeof(Person).GetProperties();
foreach (var prop in properies)
{
    Console.WriteLine($&amp;quot;{prop.Name} =&amp;gt; {prop.GetValue(person)}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will be the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Height =&amp;gt; 185
Id =&amp;gt; 24
Name =&amp;gt; Ahmed
Birthdate =&amp;gt; 1/1/1998 12:00:00 AM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's interesting to see that because we fetched the metadata of &lt;code&gt;Height&lt;/code&gt; above the loop using &lt;code&gt;GetProperty&lt;/code&gt;, the order of returned properties from &lt;code&gt;GetProperties&lt;/code&gt; has changed and &lt;code&gt;Height&lt;/code&gt; is the first property.&lt;/p&gt;
&lt;p&gt;As you can see, the value of height is changed from &lt;code&gt;180.4&lt;/code&gt; to &lt;code&gt;185&lt;/code&gt; by using reflection.&lt;/p&gt;
&lt;p&gt;The second thing we needed was to generate an SQL query, which is very easy as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var columnNames = properties.Select(p =&amp;gt; p.Name);
var columns = string.Join(&amp;quot;, &amp;quot;, columnNames);

var sql = $&amp;quot;SELECT {columns} FROM {typeof(T).Name}&amp;quot;;
Console.WriteLine(sql);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are not sure why &lt;code&gt;GetSelectQuery&lt;/code&gt; has a &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; at the end, it's because the method is generic. It allows &lt;code&gt;GetSelectQuery&amp;lt;T&amp;gt;&lt;/code&gt; to be called with any type the programmer likes. In the example above, we have used it with &lt;code&gt;Person&lt;/code&gt;. Generics is a very powerful concept. You can learn more about generics from &lt;a href="https://www.youtube.com/watch?v=J9Cwi45UtZU&amp;amp;list=PLdbkZkVDyKZURWIWQOw2KubVRIsxdkflI"&gt;Jeremy Clark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT Id, Name, Height, Birthdate FROM Person
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you take close look at the generated SQL query, it's exactly like our own hand written query. So now we can combine our new found knowledge to write a method that can query the database for any table we like and map the results to c# types:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; GetAll&amp;lt;T&amp;gt;() where T : new()
{
    var list = new List&amp;lt;T&amp;gt;();

    var properties = typeof(T).GetProperties();

    var columnNames = properties.Select(p =&amp;gt; p.Name);
    var columns = string.Join(&amp;quot;, &amp;quot;, columnNames);

    var sql = $&amp;quot;SELECT {columns} FROM {typeof(T).Name}&amp;quot;;

    using (var connection = new SqlConnection(ConnectionString))
    using (var command = new SqlCommand(sql, connection))
    {
        await connection.OpenAsync();

        using (var reader = await command.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                var model = new T();

                foreach (var property in properties)
                {
                    property.SetValue(model, reader[property.Name]);
                }

                list.Add(model);
            }
        }
    }

    return list;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;new()&lt;/code&gt; constraint makes sure the &lt;code&gt;T&lt;/code&gt; has a public constructor that takes no parameters. So that we can write &lt;code&gt;var model = new T();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And we can use it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;Person&amp;gt; people = GetAll&amp;lt;Person&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty neat right?&lt;/p&gt;
&lt;p&gt;And here is what &lt;code&gt;Insert&lt;/code&gt; and &lt;code&gt;Update&lt;/code&gt; would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task Insert&amp;lt;T&amp;gt;(T item)
{
    var properties = typeof(T).GetProperties();

    var columns = string.Join(&amp;quot;, &amp;quot;, properties.Select(p =&amp;gt; p.Name));
    var columnParameters = string.Join(&amp;quot;, &amp;quot;, properties.Select(p =&amp;gt; $&amp;quot;&amp;#64;{p.Name}&amp;quot;));

    var sql = $&amp;quot;INSERT INTO {typeof(T).Name} ({columns}) VALUES ({columnParameters})&amp;quot;;

    using (var connection = new SqlConnection(ConnectionString))
    using (var command = new SqlCommand(sql, connection))
    {
        await connection.OpenAsync();

        foreach (var property in properties)
        {
            command.Parameters.AddWithValue($&amp;quot;&amp;#64;{property.Name}&amp;quot;, property.GetValue(item));
        }

        await command.ExecuteNonQueryAsync();
    }
}

public async Task Update&amp;lt;T&amp;gt;(string idPropertyName, T item)
{
    var properties = typeof(T).GetProperties();

    var columnUpdates = properties.Where(p =&amp;gt; p.Name != idPropertyName)
                                  .Select(p =&amp;gt; $&amp;quot;{p.Name} = &amp;#64;{p.Name}&amp;quot;);
    var columns = string.Join(&amp;quot;, &amp;quot;, columnUpdates);

    var sql = $&amp;quot;UPDATE {typeof(T).Name} SET {columns} WHERE {idPropertyName} = &amp;#64;{idPropertyName}&amp;quot;;

    using (var connection = new SqlConnection(ConnectionString))
    using (var command = new SqlCommand(sql, connection))
    {
        await connection.OpenAsync();

        foreach (var property in properties)
        {
            command.Parameters.AddWithValue($&amp;quot;&amp;#64;{property.Name}&amp;quot;, property.GetValue(item));
        }

        await command.ExecuteNonQueryAsync();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, with a few lines of code we were able to implement a bare minimum Micro-ORM. But there are a lot of features in an ORM. One of them is that ORMs usually support multiple DBMSs, we only support MSSQL with our implementation here (Although for a simple mapper like this one, it's not very hard to support other DBMSs). Another thing would be providing a way to query the database (adding where clauses in the &lt;code&gt;GetAll&lt;/code&gt; method). It's usually implemented using &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/"&gt;&lt;code&gt;ExpressionTree&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the way we have implemented, it won't have a very good performance. Some easy tricks to improve performance would be cache the &lt;code&gt;PropertyInfo&lt;/code&gt;s for each type and reuse it, because reflection is very expensive. Actual ORMs much better optimized both in the c# side and in the way they generate SQL.&lt;/p&gt;
&lt;p&gt;The code for this article is available &lt;a href="https://github.com/encrypt0r/ORMSample"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The sample codes in this article are for demonstration purposes alone and should NOT be used in production environments.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Setting up automated build and release pipeline for side-loaded UWP apps using Azure DevOps</title>
			<link>https://mazeez.dev/posts/uwp-devops</link>
			<description>&lt;p&gt;This week we set up a CI/CD pipeline for one of our UWP apps that needs to be sideloaded because we don't publish it through the Microsoft Store. &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/packaging/auto-build-package-uwp-apps"&gt;This article&lt;/a&gt; was super useful in getting me started. Microsoft has made things quite easy with Azure DevOps, but there were a few things that took us a little bit of time to figure out.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/uwp-devops</guid>
			<pubDate>Sun, 27 Oct 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This week we set up a CI/CD pipeline for one of our UWP apps that needs to be sideloaded because we don't publish it through the Microsoft Store. &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/packaging/auto-build-package-uwp-apps"&gt;This article&lt;/a&gt; was super useful in getting me started. Microsoft has made things quite easy with Azure DevOps, but there were a few things that took us a little bit of time to figure out.&lt;/p&gt;
&lt;h2 id="a-little-bit-of-context"&gt;A little bit of context&lt;/h2&gt;
&lt;p&gt;We have an enterprise UWP application that we publish via an http server. We also have a custom auto-update mechanism that updates the apps whenever an update is available. You can learn more about the &lt;a href="https://mazeez.dev/posts/update-sideloaded-uwp"&gt;auto-updater here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what we needed, is a build pipeline that builds the app for both &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;x86&lt;/code&gt; and generate an index.html page, &lt;code&gt;appinstaller&lt;/code&gt; file and the &lt;code&gt;msixbundle&lt;/code&gt; files for both the app and its dependencies.&lt;/p&gt;
&lt;h2 id="the-plan"&gt;The plan&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Setup a build pipeline to generate update package and increase version&lt;/li&gt;
&lt;li&gt;Set up a release pipeline to upload the update package via FTP&lt;/li&gt;
&lt;li&gt;Celebrate&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="setting-up-a-build-pipeline"&gt;1. Setting up a build pipeline&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/uwp/packaging/auto-build-package-uwp-apps"&gt;This article&lt;/a&gt; provides most of the information needed. But I have a few notes:&lt;/p&gt;
&lt;h3 id="use-self-hosted-agents"&gt;1.1 Use self hosted agents&lt;/h3&gt;
&lt;p&gt;Unfortunately, it seems like Microsoft hosted agents &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#capabilities-and-limitations"&gt;are not powerful enough&lt;/a&gt; to build release modes of moderate to big UWP applications. Because in release mode, it has to compile the app natively and so uses the native compilation toolchain. In our experience, the native compilation toolchain requires at least 8 GB of RAM to work properly. For our app, the Microsft hosted agents had a build success rate of less than 50%. They fail because &lt;a href="https://dev.to/encrypt0r/solving-nutcdriver-exe-returned-code-1-error-while-building-uwp-app-in-release-mode-2mc6"&gt;of memory usage issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides, hosted agents are much faster. Microsoft hosted agents would take about 45 minutes to build our app, our own hosted agents usually take about 10 minutes. This is partly because they use incremental build, instead of a clean build every time they need to build the app.&lt;/p&gt;
&lt;p&gt;So you have to use your own hosted agents. You use your own machines or virtual machines to build the application. Adding an agent to a pool is very easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to project settings &amp;gt; Agent Pools&lt;/li&gt;
&lt;li&gt;Click on &amp;quot;Default&amp;quot; or create another pool&lt;/li&gt;
&lt;li&gt;Click on &amp;quot;New Agent&amp;quot; and follow the instructions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you will need to tell the build pipeline to use your self-hosted agents.
You can specify the pool name very easily in yaml:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;pool:
  name: &amp;quot;Default&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might also want to use the 64 bit compiler, for that add this xml snippet a &lt;code&gt;PropertyGroup&lt;/code&gt; in your project's &lt;code&gt;csproj&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Use64Bitcompiler&amp;gt;true&amp;lt;/Use64Bitcompiler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-nuget-version-4.x"&gt;1.2 Use Nuget version &lt;code&gt;4.x&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For some reason, not specifying Nuget version leads to the failure of the build.&lt;/p&gt;
&lt;h3 id="using-extension-sdks-with-a-build-pipeline"&gt;1.3 Using Extension SDKs with a build pipeline&lt;/h3&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;An Extension SDK is similar in concept to a regular assembly reference, but is instead a rich collection of files to cover various configurations and design time scenarios.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you're using an SDK reference, for example if you use &lt;a href="https://marketplace.visualstudio.com/items?itemName=SQLiteDevelopmentTeam.SQLiteforUniversalWindowsPlatform"&gt;SQLite for UWP&lt;/a&gt;, you must include the SDK with the source code and tell MSBuild to use the local version before searching for the SDK in the global folder. &lt;a href="https://oren.codes/2012/03/24/how-to-use-extension-sdks-per-project/"&gt;This article&lt;/a&gt; explains the steps, but here is a summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a folder beside your solution file and call it &lt;code&gt;SDKs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy UAP folder from &lt;code&gt;C:\Program Files (x86)\Microsoft SDKs&lt;/code&gt; into the &lt;code&gt;SDKs&lt;/code&gt; folder beside your solution file.&lt;/li&gt;
&lt;li&gt;Add this snippet to the &lt;code&gt;.csproj&lt;/code&gt; file:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PropertyGroup&amp;gt;
  &amp;lt;SDKReferenceDirectoryRoot&amp;gt;$(SolutionDir)\SDKs;$(SDKReferenceDirectoryRoot)&amp;lt;/SDKReferenceDirectoryRoot&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="versioning-the-packages"&gt;1.4 Versioning the packages&lt;/h3&gt;
&lt;p&gt;Usually the version of the package is stored inside &lt;code&gt;Package.appxmanifest&lt;/code&gt; and auto-incremented by Visual Studio. But this requires you to commit the changes to make sure you don't reuse versions.&lt;/p&gt;
&lt;p&gt;I am not comfortable with build pipelines committing changes to source code. Fortunately there are a few extensions for Azure DevOps that can help with this. The one I decided to use is &lt;a href="https://marketplace.visualstudio.com/items?itemName=maikvandergaag.maikvandergaag-versioncounter"&gt;Version Number counter&lt;/a&gt;. &lt;a href="https://msftplayground.com/2018/11/version-number-counter-for-azure-devops/"&gt;This article&lt;/a&gt; does a great job of explaining how you can use it.&lt;/p&gt;
&lt;p&gt;What we can do is have a PowerShell script  update the app manifest file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# https://stackoverflow.com/a/42699995
$xmlFileName = &amp;quot;$(Build.SourcesDirectory)\{ProjectName}\Package.appxmanifest&amp;quot;
      
[xml]$xmlDoc = Get-Content $xmlFileName
$xmlDoc.Package.Identity.Version = &amp;quot;$env:appVersion.0&amp;quot;

echo 'New version:' $xmlDoc.Package.Identity.Version

$xmlDoc.Save($xmlFileName)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For that you need to define a variable called &lt;code&gt;appVersion&lt;/code&gt; with the initial version in this format: &lt;code&gt;1.0.0&lt;/code&gt;. Because UWP package version format is like &lt;code&gt;1.0.0.0&lt;/code&gt;, you have to concatenate another &amp;quot;0&amp;quot; at the end of &lt;code&gt;appVersion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you're a desktop developer, you might not like PowerShell or bash scripts. But they are very powerful and flexible for automation scenarios.&lt;/p&gt;
&lt;h3 id="use-templates"&gt;1.5 Use templates&lt;/h3&gt;
&lt;p&gt;Sometimes you have multiple configurations and environments you want to build for. We wanted to be able to build for both Production and Staging environments. Each of which have different build configuration (Release, Debug, Staging...), supported different build platforms (x86, x64, ARM), had different auto-update URLs, etc..&lt;/p&gt;
&lt;p&gt;Azure DevOps yaml files support templates. You define a base template and put all of the common steps and jobs there, then you define a bunch of parameters for the template so that the pipelines that inherit from the base template can configure these parameters.&lt;/p&gt;
&lt;h2 id="the-code"&gt;The code&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Template.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;parameters:
    # Platforms to generate bundles for: x86, x64, x86|x64
    buildPlatform: 'x86|x64'
    # Platforms to generate bundles for (Debug, Release...)
    buildConfiguration: 'Release'

    # Where will the installer be uploaded to?
    installerUrl: 'Replace this by the actual URL'

    # The version of the app
    appVersion: '1.1.1'

    solution: '{ProjectName}.sln'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:
- task: PowerShell&amp;#64;2
  env:
    appVersion: ${{ parameters.appVersion }}
    buildPlatform: ${{ parameters.buildPlatform }}
    buildConfiguration: ${{ parameters.buildConfiguration }}
    installerUrl: ${{ parameters.installerUrl }}

  displayName: 'Print variables'
  inputs:
    targetType: 'inline'
    script: |
      echo &amp;quot;appVersion: $env:appVersion&amp;quot;
      echo &amp;quot;buildPlatform: $env:buildPlatform&amp;quot;
      echo &amp;quot;buildConfiguration: $env:buildConfiguration&amp;quot;
      echo &amp;quot;installerUrl: $env:installerUrl&amp;quot;

- task: versioncounter&amp;#64;1
  inputs:
    VersionVariable: 'appVersion'
    UpdateMinorVersion: true
    DevOpsPat: '{Your_PAT}'

- task: PowerShell&amp;#64;2
  env:
    appVersion: ${{ parameters.appVersion }}
  displayName: 'Replace Version Number in the manifest file'
  inputs:
    targetType: 'inline'
    script: |
      # https://stackoverflow.com/a/42699995
      $xmlFileName = &amp;quot;$(Build.SourcesDirectory)\{ProjectName}\Package.appxmanifest&amp;quot;
      
      [xml]$xmlDoc = Get-Content $xmlFileName
      $xmlDoc.Package.Identity.Version = &amp;quot;$env:appVersion.0&amp;quot;

      echo 'New version:' $xmlDoc.Package.Identity.Version

      $xmlDoc.Save($xmlFileName)

- task: NuGetToolInstaller&amp;#64;1
  inputs:
    versionSpec: '4.9.2'

- task: NuGetCommand&amp;#64;2
  inputs:
    command: 'restore'
    restoreSolution: '${{ parameters.solution }}'

- task: VSBuild&amp;#64;1
  inputs:
    solution: '${{ parameters.solution }}'
    msbuildArgs: '/p:AppxBundlePlatforms=&amp;quot;${{ parameters.buildPlatform}}&amp;quot; /p:AppxPackageDir=&amp;quot;${{ parameters.appxPackageDir}}&amp;quot; /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly'
    platform: 'x64'
    configuration: '${{ parameters.buildConfiguration }}'
    msbuildArchitecture: 'x64'

- task: PowerShell&amp;#64;2
  env:
    installerUrl: ${{ parameters.installerUrl }}
  displayName: 'Replace installer url'
  inputs:
    targetType: 'inline'
    script: |
      # https://stackoverflow.com/a/17144445
      $fileName = &amp;quot;$(build.artifactStagingDirectory)\AppxPackages\{ProjectName}.appinstaller&amp;quot;
      
      $original = &amp;quot;{Original Url in the .appinstaller file}&amp;quot;

      $content = Get-Content $fileName
      $content = $content.replace($original, $env:installerUrl)

      Set-Content -Path $fileName -Value $content

      echo 'Install Url:' $env:installerUrl

- task: CopyFiles&amp;#64;2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\${{ parameters.buildConfiguration }}\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts&amp;#64;1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Staging.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# Staging
trigger:
 - master

pool:
  name: &amp;quot;Default&amp;quot;

steps:
    - template: Template.yml
      parameters:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        installerUrl: '{Staging_URL}'
        appVersion: $(appVersion)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Production.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;# Production
trigger: none

pool:
  name: &amp;quot;Default&amp;quot;

steps:
    - template: Template.yml
      parameters:
        buildPlatform: 'x86|x64'
        buildConfiguration: 'Release'
        installerUrl: '{Production_URL}'
        appVersion: $(appVersion)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="setup-a-release-pipeline"&gt;2. Setup a release pipeline&lt;/h1&gt;
&lt;p&gt;The release pipeline is very easy, since all of the hard work is done in the build pipeline. The only thing you have to do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get the build artifacts from the build pipeline. You can do that by clicking &amp;quot;Artifacts&amp;quot; part. Select &amp;quot;Build&amp;quot; from &amp;quot;Source Type&amp;quot; and select the appropriate build pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upload the &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;{ProjectName}.appinstaller&lt;/code&gt; and the package folder to the update website via FTP. Azure DevOps has a built-in task for FTP upload.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="celebrate"&gt;3. Celebrate 🎉&lt;/h1&gt;
&lt;p&gt;The title pretty much says it all.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Update 04/25/2020:&lt;/p&gt;
&lt;p&gt;You can use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=stefankert.codesigning"&gt;Code Signing Task&lt;/a&gt; for signing your WUP app easily and securely.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to get an instance of a page when you navigate to it in UWP</title>
			<link>https://mazeez.dev/posts/how-to-get-an-instance-of-a-page-when-you-navigate-to-it-in-uwp</link>
			<description>&lt;p&gt;By default when navigating a frame to a page, UWP doesn't give you back a page instance. So the only way of passing parameters is to use the &lt;code&gt;parameter&lt;/code&gt; parameter. But having an instance to the page can have many other benefits: For example it allows the child page to have custom events and the parent page can subscribe to them.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/how-to-get-an-instance-of-a-page-when-you-navigate-to-it-in-uwp</guid>
			<pubDate>Sun, 26 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;By default when navigating a frame to a page, UWP doesn't give you back a page instance. So the only way of passing parameters is to use the &lt;code&gt;parameter&lt;/code&gt; parameter. But having an instance to the page can have many other benefits: For example it allows the child page to have custom events and the parent page can subscribe to them.&lt;/p&gt;
&lt;p&gt;However &lt;code&gt;Frame&lt;/code&gt; has an event called &lt;code&gt;Navigated&lt;/code&gt; that can help us to write an extension method to get a reference to the actual instance:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Windows.UI.Xaml.Media.Animation;
using Windows.UI.Xaml.Navigation;

namespace Windows.UI.Xaml.Controls
{
    public static class FrameExtensions
    {
        /// &amp;lt;summary&amp;gt;
        /// Navigates to a page and returns the instance of the page if it succeeded,
        /// otherwise returns null.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;typeparam name=&amp;quot;TPage&amp;quot;&amp;gt;&amp;lt;/typeparam&amp;gt;
        /// &amp;lt;param name=&amp;quot;frame&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;quot;transitionInfo&amp;quot;&amp;gt;The navigation transition.
        /// Example: &amp;lt;see cref=&amp;quot;DrillInNavigationTransitionInfo&amp;quot;/&amp;gt; or
        /// &amp;lt;see cref=&amp;quot;SlideNavigationTransitionInfo&amp;quot;/&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static TPage Navigate&amp;lt;TPage&amp;gt;(
            this Frame frame,
            NavigationTransitionInfo transitionInfo = null)
            where TPage : Page
        {
            TPage view = null;
            void OnNavigated(object s, NavigationEventArgs args)
            {
                frame.Navigated -= OnNavigated;
                view = args.Content as TPage;
            }

            frame.Navigated += OnNavigated;

            frame.Navigate(typeof(TPage), null, transitionInfo);
            return view;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we have page called &lt;code&gt;Page1&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public sealed partial class Page1 : Page
{
    public Page1()
    {
        this.InitializeComponent();
    }

    public void Init(string param1, int param2)
    {
        // Initialize the page
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can navigate to it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Page1 page = frame.Navigate&amp;lt;Page1&amp;gt;();
// You can now do stuff with the page
// for example pass in as many parameters as you want
page.Init(&amp;quot;Hello World&amp;quot;, 42);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;Page1.Init&lt;/code&gt; will be called after &lt;code&gt;Page1.OnNavigatedTo&lt;/code&gt; and before &lt;code&gt;Page1.Loading&lt;/code&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Why you should read on topics that you might not need right now?</title>
			<link>https://mazeez.dev/posts/why-you-should-read-on-topics-that-you-might-not-need-right-now</link>
			<description>&lt;p&gt;I was browsing web once when I stumbled upon an article about &lt;a href="https://github.com/mono/SkiaSharp"&gt;SkiaSharp&lt;/a&gt;. It's a C# wrapper around Google's fast 2D rending engine. I was developing desktop apps in WPF at the time and didn't feel the need to learn a low level library like that.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/why-you-should-read-on-topics-that-you-might-not-need-right-now</guid>
			<pubDate>Thu, 23 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I was browsing web once when I stumbled upon an article about &lt;a href="https://github.com/mono/SkiaSharp"&gt;SkiaSharp&lt;/a&gt;. It's a C# wrapper around Google's fast 2D rending engine. I was developing desktop apps in WPF at the time and didn't feel the need to learn a low level library like that.&lt;/p&gt;
&lt;p&gt;A few weeks later, I found myself in a project that required building a fast layout designer. First, I tried to write it purely in WPF, and I did. It was super slow, on a decently fast computer, it took a few seconds to load a layout.&lt;/p&gt;
&lt;p&gt;Then I remembered SkiaSharp. I headed over to its documentation and it seemed easy enough for me to use it. I rewrote the layout engine in SkiaSharp and It was blazing fast. You could have loaded a layout many times in one second and you still wouldn't feel any delay.&lt;/p&gt;
&lt;p&gt;So when you see an article about something interesting, even if it's not directly related to what you work on right now, read it. At least skim it. That way when you do need it, you'll at least have a name to google.&lt;/p&gt;
&lt;p&gt;I feel like software engineering is not about memorizing every algorithm and data structure out there, but it's about knowing about the right tools for the right problems.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How the C# yield keyword works</title>
			<link>https://mazeez.dev/posts/csharp-yield</link>
			<description>&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield"&gt;C# yield keyword&lt;/a&gt; is an interesting keyword, because when you use it, you can return an &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; without specifying any concrete implementation explicitly.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/csharp-yield</guid>
			<pubDate>Mon, 20 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield"&gt;C# yield keyword&lt;/a&gt; is an interesting keyword, because when you use it, you can return an &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; without specifying any concrete implementation explicitly.&lt;/p&gt;
&lt;p&gt;Here is a code snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static IEnumerable&amp;lt;int&amp;gt; GetNumbers()
{
    yield return 0;
    yield return 1;
    yield return 2;
}

static void Main(string[] args)
{
    var numbers = GetNumbers();
    foreach (var n in numbers)
        Console.WriteLine(n);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0
1
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But how does this work? What does &lt;code&gt;GetNumbers&lt;/code&gt; return exactly? Lets dig a little bit deeper:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static void Main(string[] args)
{
    var numbers = GetNumbers();
    Console.WriteLine(numbers.GetType().Name);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GetType()&lt;/code&gt; returns the type of an object and &lt;code&gt;Name&lt;/code&gt; gives us the name of the type.&lt;/p&gt;
&lt;p&gt;We will see that it outputs &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0&lt;/code&gt;. Strange right? Because in C# you can't use &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; in identifiers. That's because &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0&lt;/code&gt; is actually a class that's generated by the compiler at compile time. It represents a &lt;a href="https://medium.freecodecamp.org/state-machines-basics-of-computer-science-d42855debc66"&gt;state machine&lt;/a&gt; that implements &lt;code&gt;GetNumbers()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To understand it better, you have to see the decompiled C#, which is quite easy with the help of &lt;a href="https://sharplab.io/#v2:D4AQDABCCMDcCwAocVoBYGKQOwIYFsBTAZwAdcBjQiACUIBt6B7AdSYCd6ATJAbyQiCoAJlQB2AUP6Ihs1ADZUAZgA8AS2wAXAHwQA4oU0A5AK74ARoXbEAFAEpJciNKdOY0KGIhhMrue88IOEc/VA8QL2FfVwBfJBDZGEUQNAgAWVwNGxgwAG0AXQhcdgBzYgcZVxdQwQA3YohsM0trCABefUNTCytbO2iamABOGyae6wA6A00AFQBPUkJ7CaMCQn6EoTjKwW2YoA=="&gt;SharpLab&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace HelloWorld
{
    internal class Program
    {
        [CompilerGenerated]
        private sealed class &amp;lt;GetNumbers&amp;gt;d__0 : IEnumerable&amp;lt;int&amp;gt;, IEnumerable, IEnumerator&amp;lt;int&amp;gt;, IDisposable, IEnumerator
        {
            private int &amp;lt;&amp;gt;1__state;

            private int &amp;lt;&amp;gt;2__current;

            private int &amp;lt;&amp;gt;l__initialThreadId;

            int IEnumerator&amp;lt;int&amp;gt;.Current
            {
                [DebuggerHidden]
                get
                {
                    return &amp;lt;&amp;gt;2__current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return &amp;lt;&amp;gt;2__current;
                }
            }

            [DebuggerHidden]
            public &amp;lt;GetNumbers&amp;gt;d__0(int &amp;lt;&amp;gt;1__state)
            {
                this.&amp;lt;&amp;gt;1__state = &amp;lt;&amp;gt;1__state;
                &amp;lt;&amp;gt;l__initialThreadId = Environment.CurrentManagedThreadId;
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
            }

            private bool MoveNext()
            {
                switch (&amp;lt;&amp;gt;1__state)
                {
                    default:
                        return false;
                    case 0:
                        &amp;lt;&amp;gt;1__state = -1;
                        &amp;lt;&amp;gt;2__current = 0;
                        &amp;lt;&amp;gt;1__state = 1;
                        return true;
                    case 1:
                        &amp;lt;&amp;gt;1__state = -1;
                        &amp;lt;&amp;gt;2__current = 1;
                        &amp;lt;&amp;gt;1__state = 2;
                        return true;
                    case 2:
                        &amp;lt;&amp;gt;1__state = -1;
                        &amp;lt;&amp;gt;2__current = 2;
                        &amp;lt;&amp;gt;1__state = 3;
                        return true;
                    case 3:
                        &amp;lt;&amp;gt;1__state = -1;
                        return false;
                }
            }

            bool IEnumerator.MoveNext()
            {
                //ILSpy generated this explicit interface implementation from .override directive in MoveNext
                return this.MoveNext();
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            IEnumerator&amp;lt;int&amp;gt; IEnumerable&amp;lt;int&amp;gt;.GetEnumerator()
            {
                if (&amp;lt;&amp;gt;1__state == -2 &amp;amp;&amp;amp; &amp;lt;&amp;gt;l__initialThreadId == Environment.CurrentManagedThreadId)
                {
                    &amp;lt;&amp;gt;1__state = 0;
                    return this;
                }
                return new &amp;lt;GetNumbers&amp;gt;d__0(0);
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                return System.Collections.Generic.IEnumerable&amp;lt;System.Int32&amp;gt;.GetEnumerator();
            }
        }

        [IteratorStateMachine(typeof(&amp;lt;GetNumbers&amp;gt;d__0))]
        private static IEnumerable&amp;lt;int&amp;gt; GetNumbers()
        {
            return new &amp;lt;GetNumbers&amp;gt;d__0(-2);
        }

        private static void Main(string[] args)
        {
            Console.WriteLine(GetNumbers().GetType().Name);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, there is a hidden &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0&lt;/code&gt; class generated by the compiler and &lt;code&gt;GetNumbers()&lt;/code&gt; is modified to return a new instance of that class. The most interesting part of &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0&lt;/code&gt; is the &lt;code&gt;MoveNext()&lt;/code&gt; method in which the compiler translates the logic in GetNumbers() into a state machine.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn"&gt;Roslyn&lt;/a&gt; (the C# compiler) generates a lot of code on your behalf, this operation is called lowering. Some other examples are when you use a &lt;a href="https://sharplab.io/#v2:D4AQDABCCMDcCwAocVoDoAyBLAdgRwWUhgFZCkcBDAWwFMBnAB0oGNaIAJWgG24HsA6nwBO3ACZIA3kgiyoAJlQB2GXOmI5m1ADYoAFggBZSrgAUMMAG0AuhErCA5vQCUqrRHXv3AN3sQcAK7UAEa0wvQQALwQAKKBdMKUwdy0aABKlDgOtKbQADQQ0GDOhF5aAGYitKwAFqa+wv4QuP5BoeGuGmVqbt0QAJAwAJymOCVyvWUAvpNyM12y81NAA="&gt;&lt;code&gt;for each&lt;/code&gt;&lt;/a&gt; or when you use &lt;a href="https://sharplab.io/#v2:D4AQDABCCMDcCwAocVoFYGKQOwIYFsBTAZwAdcBjQiACUIBt6B7AdSYCd6ATJAbyQiCoAJlQB2AUP6Ihs1ADYoADiiKAIkwDKTIgBcAFgEtsAcwCCxAJ7YKACgCUkuRGnOIASHcwAnLYBEAEKEAGYchH72mG5yIN6qAHRqDLiWtmhgYJFO0ai+fmbBuoTsEVFuAL5I2bIwiiAALBAAsrjGtjBgANoAuhC47CbEjjJurjmCGtp6RqYW1nb28QDihLpmAO6tRewOy6sASiQArvS6DmXOlSOCV+VAA="&gt;&lt;code&gt;async/await&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Knowing how the compiler translates your code helps you to understand the code better and it also helps you in troubleshooting. For example, if we have a piece of code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static IEnumerable&amp;lt;int&amp;gt; GetNumbers()
{
    yield return 0;
    throw new Exception();
}

static void Main(string[] args)
{
    try
    {
        var numbers = GetNumbers();
        foreach(var n in numbers)
        {
            Console.WriteLine(n);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will be the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0
System.Exception: Exception of type 'System.Exception' was thrown.
   at HelloWorld.Program.&amp;lt;GetNumbers&amp;gt;d__0.MoveNext()
   at HelloWorld.Program.Main(String[] args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the first element is returned and then an exception is thrown in &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0.MoveNext()&lt;/code&gt;. Knowing what is &lt;code&gt;&amp;lt;GetNumbers&amp;gt;d__0&lt;/code&gt; makes you more comforatable dealing with these kinds of exceptions.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Writing Native Libraries in C# and using them in other languages</title>
			<link>https://mazeez.dev/posts/writing-native-libraries-in-csharp</link>
			<description>&lt;p&gt;Note: Stefan Hausotte has ported &lt;a href="https://secanablog.wordpress.com/2020/02/01/writing-a-native-library-in-f-which-can-be-called-from-c/"&gt;this little experiment to F#&lt;/a&gt;.&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/writing-native-libraries-in-csharp</guid>
			<pubDate>Fri, 03 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Note: Stefan Hausotte has ported &lt;a href="https://secanablog.wordpress.com/2020/02/01/writing-a-native-library-in-f-which-can-be-called-from-c/"&gt;this little experiment to F#&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recently I stumbled upon &lt;a href="https://medium.com/&amp;#64;MStrehovsky/fight-the-global-warming-compile-your-c-apps-ahead-of-time-9997e953645b"&gt;this article&lt;/a&gt; from &lt;a href="https://twitter.com/MStrehovsky"&gt;Michal Strehovsky&lt;/a&gt;. It was a great introduction to CoreRT, it made me curious, can you write native libraries with CoreRT? and the answer was Yes!&lt;/p&gt;
&lt;?# Twitter 1123859217654460424 /?&gt;
&lt;p&gt;I have a little library that I want to be available for multiple languages, so I was quite interested in it. So I tried out the &lt;a href="https://github.com/dotnet/corert/tree/master/samples/NativeLibrary"&gt;official sample&lt;/a&gt; and was delighted with the results.&lt;/p&gt;
&lt;p&gt;I compiled the library using &lt;code&gt;dotnet publish /p:NativeLib=Shared -r win-x64 -c Release&lt;/code&gt; and it produced a 4.52 MB dll. With the help of Michal and by following the steps of &lt;a href="https://github.com/dotnet/corert/blob/master/Documentation/using-corert/optimizing-corert.md"&gt;this article&lt;/a&gt;, I was able to get the size down to 1.67 MB, which is good enough for me.&lt;/p&gt;
&lt;p&gt;The official sample has &lt;a href="https://github.com/dotnet/corert/blob/master/samples/NativeLibrary/Class1.cs"&gt;a class&lt;/a&gt; that contains two methods: &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;WriteLine&lt;/code&gt; which demonstrate how to take primitives and strings as parameters. By default, CoreRT only allows primitives as parameter types, you'll have to marshal anything else that's more complex. However, &lt;code&gt;System.Runtime.InteropServices.Marshal&lt;/code&gt; does some have helpful methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Class1
{
    [NativeCallable(EntryPoint = &amp;quot;add&amp;quot;, CallingConvention = CallingConvention.StdCall)]
    public static int Add(int a, int b)
    {
        return a + b;
    }

    [NativeCallable(EntryPoint = &amp;quot;write_line&amp;quot;, CallingConvention = CallingConvention.StdCall)]
    public static int WriteLine(IntPtr pString)
    {
        // The marshalling code is typically auto-generated by a custom tool in larger projects.
        try
        {
            // NativeCallable methods only accept primitive arguments. The primitive arguments
            // have to be marshalled manually if necessary.
            string str = Marshal.PtrToStringAnsi(pString);

            Console.WriteLine(str);
        }
        catch
        {
            // Exceptions escaping out of NativeCallable methods are treated as unhandled exceptions.
            // The errors have to be marshalled manually if necessary.
            return -1;
        }
        return 0;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The methods that are decorated with &lt;code&gt;NativeCallable&lt;/code&gt; cannot be called through normal C# methods, but they can be called through P/Invoke 😈.&lt;/p&gt;
&lt;p&gt;To do that, you have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build the native library by running &lt;code&gt;dotnet publish /p:NativeLib=Shared -r win-x64 -c Release&lt;/code&gt; in its folder.&lt;/li&gt;
&lt;li&gt;Create a new console app (I created a dotnet core console app, but it doesn't matter).&lt;/li&gt;
&lt;li&gt;Right click on the project and click &lt;code&gt;Add =&amp;gt; Exisiting Item&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Browse to &lt;code&gt;bin\Release\netcoreapp2.2\win-x64\native&lt;/code&gt; folder of the native library project and then select the dll and click on &lt;code&gt;Add As Link&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Right Click on the dll in Solution Explorer and click on properties.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;Copy to Output Directory&lt;/code&gt; to &lt;code&gt;Copy if newer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change Solutions Platform to &lt;code&gt;x64&lt;/code&gt;
&lt;img src="https://thepracticaldev.s3.amazonaws.com/i/czdhpxbk35a55er415n3.PNG" class="img-fluid" alt="Solutions Platform" /&gt;&lt;/li&gt;
&lt;li&gt;And then change the code in &lt;code&gt;Program.cs&lt;/code&gt; as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program
{
    [DllImport(&amp;quot;NativeLibrary.dll&amp;quot;, EntryPoint = &amp;quot;add&amp;quot;, CallingConvention = CallingConvention.StdCall)]
    public static extern int Add(int a, int b);

    [DllImport(&amp;quot;NativeLibrary.dll&amp;quot;, EntryPoint = &amp;quot;write_line&amp;quot;, CallingConvention = CallingConvention.StdCall)]
    public static extern void WriteLine(string text);

    static void Main(string[] args)
    {
        var result = Add(1, 2);
        WriteLine(result.ToString());
        WriteLine(&amp;quot;Hello World!&amp;quot;);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the console app and you'll get an output like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://thepracticaldev.s3.amazonaws.com/i/84kbvfvss1xwiy7vnvbx.gif" class="img-fluid" alt="But Why?" /&gt;&lt;/p&gt;
&lt;p&gt;Now p/invoking the library might not be very useful, but compiling a class library as a native library opens doors for other languages to call the library.&lt;/p&gt;
&lt;p&gt;It was a long and painful process, but I was eventually able to reference the library from the C++ app. This &lt;a href="https://youtu.be/or1dAmUO8k0"&gt;video&lt;/a&gt; and this &lt;a href="https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=vs-2019"&gt;article&lt;/a&gt; were super helpful.&lt;/p&gt;
&lt;p&gt;Here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add an empty C++ project to the solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a source file and paste in this code snippet:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-cpp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;NativeLibrary.h&amp;gt;
using namespace std;

void main()
{
    int result = add(1, 2);
    cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;
    write_line(&amp;quot;Hello World!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Create a new header file called &lt;code&gt;NativeLibrary.h&lt;/code&gt; (That's the name of the library) and paste in this code snippet:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-cpp"&gt;#pragma once
extern &amp;quot;C&amp;quot; int __stdcall add(int a, int b);
extern &amp;quot;C&amp;quot; void __stdcall write_line(const char* pString);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see have written the signatures of the functions that are exported from &lt;code&gt;NativeLibrary&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;p&gt;Right Click on the C++ project and Click on Properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;code&gt;All Configurations&lt;/code&gt; from &lt;code&gt;Configuration:&lt;/code&gt;. This will make sure that the changes apply to both &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;Debug&lt;/code&gt; configurations (And any other configuration you might have).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to General and change &lt;code&gt;Output Directory&lt;/code&gt; to &lt;code&gt;$(ProjectDir)bin\$(Platform)\$(Configuration)\&lt;/code&gt;. This is not necessary, but I felt more at home like this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;C\C++&lt;/code&gt; &amp;gt; &lt;code&gt;Linker&lt;/code&gt; &amp;gt; &lt;code&gt;General&lt;/code&gt; and add &lt;code&gt;$(SolutionDir)NativeLibrary\bin\Release\netcoreapp2.2\win-x64\native&lt;/code&gt; to &lt;code&gt;Additional Library Directories&lt;/code&gt;. This allows the linker to discover &lt;code&gt;NativeLibrary.lib&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;C\C++&lt;/code&gt; &amp;gt; &lt;code&gt;Linker&lt;/code&gt; &amp;gt; &lt;code&gt;Input&lt;/code&gt; and add &lt;code&gt;NativeLibrary.lib&lt;/code&gt; to the list of &lt;code&gt;Additional Dependencies&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;Build Events&lt;/code&gt; &amp;gt; &lt;code&gt;Post-Build Event&lt;/code&gt; and paste in this code snippet to &lt;code&gt;Command Line&lt;/code&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;xcopy /y /d &amp;quot;$(SolutionDir)NativeLibrary\bin\Release\netcoreapp2.2\win-x64\native\NativeLibrary.dll&amp;quot; &amp;quot;$(OutDir)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will copy &lt;code&gt;NativeLibrary.dll&lt;/code&gt; to the output dir whenever you build the C++ project.&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;Build and run the application and you should see this output:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;3
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this is not cool, I don't know what is.&lt;/p&gt;
&lt;p&gt;The source code is &lt;a href="https://github.com/encrypt0r/CoreRTDemo"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Enabling automatic updates for sideloaded UWP apps</title>
			<link>https://mazeez.dev/posts/update-sideloaded-uwp</link>
			<description>&lt;p&gt;Recently we wanted to enable auto-updates for an app that we were developing for a client. The app is developed in UWP and it's sideloaded into the client's computers. Although Microsoft has added an auto-update functionality in the &lt;code&gt;1803&lt;/code&gt; build of Windows, we had a few issues with it:&lt;/p&gt;</description>
			<enclosure url="https://mazeez.dev/assets/images/cover.jpg" length="0" type="image" />
			<guid>https://mazeez.dev/posts/update-sideloaded-uwp</guid>
			<pubDate>Fri, 28 Dec 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Recently we wanted to enable auto-updates for an app that we were developing for a client. The app is developed in UWP and it's sideloaded into the client's computers. Although Microsoft has added an auto-update functionality in the &lt;code&gt;1803&lt;/code&gt; build of Windows, we had a few issues with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was not very reliable&lt;/li&gt;
&lt;li&gt;We didn't have much control over it beside a simple auto-update policy that specified how often it should check for updates.&lt;/li&gt;
&lt;li&gt;Troubleshooting was very hard as there were no clear way to find out why the auto-updater was not working properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I found &lt;a href="https://matthijs.hoekstraonline.net/2016/09/27/auto-updater-for-my-side-loaded-uwp-apps/"&gt;an article&lt;/a&gt; from 2016 and decided to improve upon it and put it a &lt;a href="http://nuget.org/packages/Dwrandaz.AutoUpdateComponent"&gt;nuget package&lt;/a&gt;. The library is open-source and is available on &lt;a href="https://github.com/dwrandaz/AutoUpdateComponent"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-use"&gt;How to use&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;First, &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/packaging/web-install-iis"&gt;configure the IIS server and create a web app&lt;/a&gt;. You can also take a look &lt;a href="https://github.com/Dwrandaz/AutoUpdateComponent/tree/master/Sample/CustomStore"&gt;at the sample web app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install the nuget package: &lt;a href="http://nuget.org/packages/Dwrandaz.AutoUpdateComponent"&gt;Dwrandaz.AutoUpdateComponent&lt;/a&gt; in the UWP app.&lt;/li&gt;
&lt;li&gt;Set minimum version of the app to &lt;code&gt;1803&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the package manifest &lt;code&gt;.appmanifest&lt;/code&gt; file of the main app and declare an app service:
&lt;ul&gt;
&lt;li&gt;Name: The default values is &lt;code&gt;Dwrandaz.AutoUpdate&lt;/code&gt;. However, you can change it to any name you like but you should note that this name is important and it should be passed to &lt;code&gt;AutoUpdateManager.TryToUpdateAsync&lt;/code&gt; if you don't use the default name.&lt;/li&gt;
&lt;li&gt;Entry point: &lt;code&gt;Dwrandaz.AutoUpdateComponent.UpdateTask&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Right click on the package manifest &lt;code&gt;.appmanifest&lt;/code&gt; file and click on &lt;code&gt;View Code&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add this namespace declaration: &lt;code&gt;xmlns:rescap=&amp;quot;http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;rescap&lt;/code&gt; to the &lt;code&gt;IgnorableNamespaces&lt;/code&gt;, for example: &lt;code&gt;IgnorableNamespaces=&amp;quot;uap mp rescap&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;Package&lt;/code&gt; tag, make sure these elements exist:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Capabilities&amp;gt;
    &amp;lt;Capability Name=&amp;quot;internetClient&amp;quot; /&amp;gt;
    &amp;lt;rescap:Capability Name=&amp;quot;packageManagement&amp;quot; /&amp;gt;
&amp;lt;/Capabilities&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information, take a look at the &lt;a href="https://github.com/Dwrandaz/AutoUpdateComponent/blob/master/Sample/SampleApp/Package.appxmanifest"&gt;sample apps manifest file&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Example usage:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var path = &amp;quot;http://localhost:5000/install/AwesomeApp.appinstaller&amp;quot;;
var info = await AutoUpdateManager.CheckForUpdatesAsync(path);
if (!info.Succeeded)
{
    // There was an error in getting the update information from the server
    // use info.ErrorMessage to get the error message
    return;
}

if (!info.ShouldUpdate)
{
    // The app is already up-to-date :)
    return;
}

// You can use info.MainBundleVersion to get the update version

var result = await AutoUpdateManager.TryToUpdateAsync(info);
if (!result.Succeeded)
{
    // There was an error in updating the app
    // use result.ErrorMessage to get the error message
    return;
}

// Success! The app was updated, it will restart soon!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more infromation take a look at the &lt;a href="https://github.com/Dwrandaz/AutoUpdateComponent/blob/master/Sample/SampleApp/MainPage.xaml.cs#L35"&gt;Sample app&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="creating-update-packages"&gt;Creating update packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you select the &lt;code&gt;Release&lt;/code&gt; configuration&lt;/li&gt;
&lt;li&gt;Right click on the main app project and click &lt;code&gt;Store&lt;/code&gt; &amp;gt; &lt;code&gt;Create App Packages...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;I want to create packages for sideloading.&lt;/code&gt;And check the &lt;code&gt;Enable automatic updates&lt;/code&gt; checkbox&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Automatically Incremenent&lt;/code&gt; checkbox under &lt;code&gt;version&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Always&lt;/code&gt; under &lt;code&gt;Generate App bundle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write the update location path and Select &lt;code&gt;Check every 1 Week&lt;/code&gt; or more so that the native auto-update mechanism doesn't mess with our auto-update mechanism.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upload the &lt;code&gt;.appinstaller&lt;/code&gt;, &lt;code&gt;.index.html&lt;/code&gt; and the package folder to the web app in the path that was used in &lt;code&gt;AutoUpdateManager.CheckForUpdatesAsync&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
		</item>
	</channel>
</rss>